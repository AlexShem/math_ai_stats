## Python Implementation Example

Let's implement a complete example of calculating and visualizing an integral using Python. We'll use the libraries `scipy.integrate` for numerical integration and `matplotlib` for visualization.

### Problem Statement

Let's work with a speed function $v(t) = 3t^2 + 2t + 1$ that represents the speed of a vehicle (in meters per second) at time $t$ (in seconds).

We want to:

1. Define this function in Python
2. Calculate the total distance traveled over the interval [0, 5]
3. Plot the function and visualize the area under the curve

### Step 1: Import necessary libraries

```{python}
import numpy as np
from scipy import integrate
import matplotlib.pyplot as plt
from matplotlib.patches import Polygon
```

### Step 2: Define the function

```{python}
def speed(t):
    """Vehicle speed (m/s) as a function of time (s)."""
    return 3*t**2 + 2*t + 1
```

### Step 3: Set up the integration interval

```{python}
# Time interval from 0 to 5 seconds
t_start = 0
t_end = 5
```

### Step 4: Numerically integrate the function

We'll use `scipy.integrate.quad` which returns both the integral value and an error estimate:

```{python}
# Calculate total distance
total_distance, error = integrate.quad(speed, t_start, t_end)

print(f"Total distance traveled: {total_distance:.2f} meters")
print(f"Estimated error: {error:.2e}")
```

### Step 5: Plot the function and visualize the area

```{python}
#| label: fig-python-integral
#| fig-cap: "Visualizing the integral of v(t) from 0 to 5"

# Generate points for plotting
t = np.linspace(t_start, t_end, 1000)
v = speed(t)

# Create the figure
fig, ax = plt.subplots(figsize=(10, 6))

# Plot the speed function
ax.plot(t, v, 'b', linewidth=2)
ax.set_xlim(t_start, t_end)
ax.set_ylim(0, max(v)*1.1)
ax.set_xlabel('Time (seconds)')
ax.set_ylabel('Speed (m/s)')
ax.grid(True, linestyle='--', alpha=0.7)

# Fill the area under the curve
verts = [(t_start, 0)] + list(zip(t, v)) + [(t_end, 0)]
poly = Polygon(verts, facecolor='skyblue', edgecolor='skyblue', alpha=0.5)
ax.add_patch(poly)

# Annotate with the calculated distance
ax.text((t_start + t_end)/2, max(v)/2, 
        f"Area = Total Distance = {total_distance:.2f} m", 
        horizontalalignment='center', fontsize=14)

ax.set_title("Speed vs. Time and Distance Traveled")
plt.tight_layout()
plt.show()
```

### Step 6: Verify the result with an analytical solution

For the function $v(t) = 3t^2 + 2t + 1$, the antiderivative is $V(t) = t^3 + t^2 + t + C$.

Using the Fundamental Theorem of Calculus:

- $\int_0^5 (3t^2 + 2t + 1) \, dt = V(5) - V(0)$
- $= (5^3 + 5^2 + 5) - (0^3 + 0^2 + 0)$
- $= (125 + 25 + 5) - 0$
- $= 155$

Let's verify this matches our numerical result:

```{python}
def antiderivative(t):
    """Antiderivative of the speed function."""
    return t**3 + t**2 + t

analytical_result = antiderivative(t_end) - antiderivative(t_start)
print(f"Analytical result: {analytical_result}")
print(f"Difference between numerical and analytical: {abs(total_distance - analytical_result):.2e}")
```

The numerical and analytical results match closely, confirming our integration.

### Understanding the Code

Let's break down the key components of our implementation:

1. **Function Definition**: 

   ```python
   def speed(t):
       return 3*t**2 + 2*t + 1
   ```

   This creates a Python function that calculates the speed at any time `t`.

2. **Numerical Integration**:

   ```python
   total_distance, error = integrate.quad(speed, t_start, t_end)
   ```

   The `quad` function takes:

   - The function to integrate (`speed`)
   - Lower limit (`t_start`)
   - Upper limit (`t_end`)
   
   It returns the integral value and an error estimate.

3. **Plotting with `matplotlib`**:

   ```python
   ax.plot(t, v, 'b', linewidth=2)
   ```

   This plots the speed function using a blue line.

4. **Visualizing the Area**:

   ```python
   verts = [(t_start, 0)] + list(zip(t, v)) + [(t_end, 0)]
   poly = Polygon(verts, facecolor='skyblue', alpha=0.5)
   ```
   
   This creates a polygon that represents the area under the curve and fills it with a semi-transparent blue color.

This example demonstrates how to effectively use Python to perform and visualize integrations, which is a common task in scientific computing, data analysis, and engineering applications.
